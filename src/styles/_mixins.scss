@use "constants" as *;

/* Generic vendor prefix mixin for animation and transition properties
 * 
 * Usage:
 * Include the mixin inside a Selector
 * Pass the arguments using the standard format
 * https://developer.mozilla.org/en-US/docs/Web/CSS/transition
 * 
 * Example:
 * a {
 *   @include vendor-prefixed(
 *     transition,
 *     #{opacity $transitionShort $transitionTiming, transform $transitionShort $transitionTiming}
 *   );
 *   &:hover {
 *     opacity: 0.5;
 *     color: red;
 *   }
 * }
**/
@mixin vendor-prefixed($property, $propertyContents) {
  & {
    -o-#{$property}: $propertyContents;
    -moz-#{$property}: $propertyContents;
    -webkit-#{$property}: $propertyContents;
    #{$property}: $propertyContents;
  }
}

// Add in hover functionality
@mixin hover-behaviour {
  &:not(.NoHover):not(:disabled):hover {
    @content;
  }
}

// Provides opcaity functionality when a user hovers on an element. Because
// opacity changes are quite common, this also includes transition mixin
@mixin hover-opacity($withTransition: true) {
  @if $withTransition {
    @include vendor-prefixed(
      transition,
      opacity $transitionShort $transitionTiming
    );
  }
  @include hover-behaviour {
    @content;
    opacity: 0.7;
  }
}

// Adds in CSS when a min-width media query is met
@mixin media-min-width($breakPoint) {
  @media (min-width: $breakPoint) {
    @content;
  }
}

// TODO: expand to avoid passing of `!important` by passing a parameter
// Adds in dark mode functionality for a given property
// Namely used for background-color and color.
@mixin media-colour-scheme($property, $lightMode, $darkMode) {
  & {
    #{$property}: $lightMode;
    @media screen and (prefers-color-scheme: dark) {
      #{$property}: $darkMode;
    }
  }
}

// Simplified version of `media-colour-scheme`, just targets one scheme
@mixin prefers-colour-scheme($scheme) {
  @media screen and (prefers-color-scheme: #{$scheme}) {
    @content;
  }
}

// Targets all headings at once
@mixin all-headings {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @content;
  }
}
