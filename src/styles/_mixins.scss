/* Generic transition mixin
 * 
 * Usage:
 * Include the mixin inside a Selector
 * Pass the arguments using the standard format
 * https://developer.mozilla.org/en-US/docs/Web/CSS/transition
 * 
 * Example:
 * a {
 *   @include transition(
 *     (
 *       opacity $transitionShort $transitionTiming,
 *       color $transitionShort $transitionTiming
 *     )
 *   );
 *   &:hover {
 *     opacity: 0.5 !important;
 *     color: red !important;
 *   }
 * }
**/
@mixin transition($transitionProperties) {
  -o-transition: $transitionProperties;
  -moz-transition: $transitionProperties;
  -webkit-transition: $transitionProperties;
  transition: $transitionProperties;
}

@mixin animation($animationProperties) {
  -o-animation: $animationProperties;
  -moz-animation: $animationProperties;
  -webkit-animation: $animationProperties;
  animation: $animationProperties;
}

// Add in hover functionality
@mixin hover-behaviour {
  &:not(.NoHover):not(:disabled):hover {
    @content;
  }
}

// Provides opcaity functionality when a user hovers on an element. Because
// opacity changes are quite common, this also includes transition mixin
@mixin hover-opacity($withTransition: true) {
  @if $withTransition {
    @include transition(opacity $transitionShort $transitionTiming);
  }
  @include hover-behaviour {
    @content;
    opacity: 0.7;
  }
}

// Adds in CSS when a min-width media query is met
@mixin media-min-width($breakPoint) {
  @media (min-width: $breakPoint) {
    @content;
  }
}

// Adds in dark mode functionality for a given property
// Namely used for background-color and color.
@mixin media-colour-scheme($property, $lightMode, $darkMode) {
  #{$property}: $lightMode;
  @media (prefers-color-scheme: dark) {
    #{$property}: $darkMode;
  }
}

@mixin prefers-colour-scheme($scheme) {
  @media (prefers-color-scheme: #{$scheme}) {
    @content;
  }
}
